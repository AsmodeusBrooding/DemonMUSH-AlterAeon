<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, March 06, 2019, 2:11 AM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "AA_demonMUSH_DXP" generated by Plugin Wizard -->

<muclient>
<plugin
   name="DemonMUSH_ExpTracker"
   author="Soth"
   id="26d751f474c5beb42581fce5"
   language="Lua"
   purpose="Track exp and more"
   date_written="2019-03-06 02:10:51"
   requires="4.92"
   version="2.0"
   >

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->
<triggers>
  <trigger
   enabled="y"
   match="kxwt_exp *"
   send_to="12"
   sequence="100"
  >
  <send>if expTracker == true then
			table.insert(expTable, %1)
		end</send></trigger>
  <trigger
   match="         You advance another rank closer to level * *!"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>if expTracker == true then
            playerMicroGain = playerMicroGain + 1
        end</send></trigger>
  <trigger
   match="You are now level * *, with * total levels!"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>if expTracker == true then
           playerLvlGain = playerLvlGain + 1
        end</send></trigger>
  <trigger
   match="You spend * experience..."
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>if expTracker == true then
            playerPracGain = playerPracGain + 1
        end</send></trigger>
  <trigger
   match="You weep as you think of the * experience that you lost."
   enabled="y"
   send_to="12"
   sequence="100"
  >
    <send>if expTracker == true then
            playerDeaths = playerDeaths + 1
        end</send></trigger>
 </triggers>
 
 <!--  Aliases  -->
 <aliases>
  <alias
   match="dxp"
   enabled="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>if expTracker == false then
			expTracker = true
			print("")
			ColourNote ("darkviolet", "black", "You begin tracking experience points.")
			timeStart = os.time()
		else
			expTracker = false
			print("")
			ColourNote ("darkviolet", "black", "You stop tracking experience points.")
			timeCurrent = os.time()
			timeFinish = os.difftime(timeCurrent, timeStart)
			Execute("show my dxp")
			totalSecs = 0
			totalMins = 0
			totalHrs = 0
			expGained = 0
			expTaken = 0
			expLastKnown = 0
			playerMicroGain = 0
			playerLvlGain = 0
			playerPracGain = 0
			playerDeaths = 0
			notifyTaken = false
			notifySpent = false
		end</send></alias>
  <alias
   match="show dxp"
   enabled="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>Execute("show my dxp")</send></alias>
  <alias
   match="brag dxp"
   enabled="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>Execute("brag say dxp")</send></alias>
<alias
   match="* * dxp"
   enabled="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>userInput = "%1 %2"
		expTableLength = #expTable
		if expTableLength &gt; 1 then
			for k, v in pairs(expTable) do
				if k &gt; 1 then
					if expTable[k] &gt; expTable[k-1] then						
						expGained = expGained + expTable[k] - expTable[k-1]
					else
						expTaken = expTaken + expTable[k-1] - expTable[k]
					end
				end
			end
		end		
		expLastKnown = expTable[expTableLength]
		expTable = {}
		table.insert(expTable, expLastKnown)		
        if userInput == "brag %2" then
			if playerMicroGain &gt; 0 then
                notifySpent = true
				-- notifyMicroSpent = true
            end
			if playerLvlGain &gt; 0 then
                notifySpent = true
				-- notifySpentLvl = true
            end
			if playerPracGain &gt; 0 then
                notifySpent = true
				-- notifySpentPrac = true
            end
			if playerDeaths &gt; 0 then
                notifyTaken = true
            end
            if expGained ~= 0 then
                timeCurrent = os.time()
                timeFinish = os.difftime(timeCurrent, timeStart)
                if timeFinish &lt; 60 then
                    if notifySpent == true and notifyTaken == true then
                        Send("%2 I have been tracking exp for "..totalSecs.." seconds and gained "..expGained.." experience. I have spent and/or lost "..expTaken.." experience during this time.")
                    elseif notifySpent == true and notifyTaken == false then
                        Send("%2 I have been tracking exp for "..timeFinish.." seconds and gained "..expGained.." experience. I have spent "..expTaken.." experience during this time.")
                    elseif notifySpent == false and notifyTaken == true then
                        Send("%2 I have been tracking exp for "..timeFinish.." seconds and gained "..expGained.." experience. I have lost "..expTaken.." experience during this time.")
                    else
                        Send("%2 I have been tracking exp for "..timeFinish.." seconds and gained a total of "..expGained.." experience.")
                    end
                elseif timeFinish &lt; 3600 then
                    totalMins = math.floor(timeFinish/60)
                    totalSecs = math.fmod(timeFinish, 60)
                    if notifySpent == true and notifyTaken == true then
                        Send("%2 I have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained "..expGained.." experience. I have spent and/or lost "..expTaken.." experience during this time.")
                    elseif notifySpent == true and notifyTaken == false then
                        Send("%2 I have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained "..expGained.." experience. I have spent "..expTaken.." experience during this time.")
                    elseif notifySpent == false and notifyTaken == true then
                        Send("%2 I have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained "..expGained.." experience. I have lost "..expTaken.." experience time during this time.")
                    else
                        Send("%2 I have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained a total of "..expGained.." experience.")
                    end
                elseif timeFinish &gt; 3599 then
                    totalSecs = math.fmod(timeFinish, 3600)
                    totalMins = math.floor(totalSecs/60)
                    totalHrs = math.floor(timeFinish/3600)
                    if notifySpent == true and notifyTaken == true then
                        Send("%2 I have been tracking exp for "..totalHrs.." hours, "..totalMins.." minutes and gained "..expGained.." experience. I have spent and/or lost "..expTaken.." experience during this time.")
                    elseif notifySpent == true and notifyTaken == false then
                        Send("%2 I have been tracking exp for "..totalHrs.." hours, "..totalMins.." minutes and gained "..expGained.." experience. I have spent "..expTaken.." experience during this time.")
                    elseif notifySpent == false and notifyTaken == true then
                        Send("%2 I have been tracking exp for "..totalHrs.." hours, "..totalMins.." minutes and gained "..expGained.." experience. I have lost "..expTaken.." experience during this time.")
                    else
                        Send("%2 I have been tracking exp for "..totalHrs.." hours, "..totalMins.." minutes and gained a total of "..expGained.." experience.")
                    end
                end
            else
                print("")
                if expTracker == false then
                    ColourNote ("darkviolet", "black", "You are not currently tracking exp.")
                else
                    ColourNote ("darkviolet", "black", "You have not gained any experience since you began tracking.")
                end
            end
        elseif userInput == "show my" then		
			expTableLength = #expTable
			if expTableLength &gt; 1 then
				for k, v in pairs(expTable) do
					if k &gt; 1 then
						if expTable[k] &gt; expTable[k-1] then						
							expGained = expGained + expTable[k] - expTable[k-1]
						else
							expTaken = expTaken + expTable[k-1] - expTable[k]
						end
					end
				end
			end
			expLastKnown = expTable[expTableLength]
			expTable = {}
			table.insert(expTable, expLastKnown)
			if playerMicroGain &gt; 0 then
                notifySpent = true
				-- notifyMicroSpent = true
            end
			if playerLvlGain &gt; 0 then
                notifySpent = true
				-- notifySpentLvl = true
            end
			if playerPracGain &gt; 0 then
                notifySpent = true
				-- notifySpentPrac = true
            end
			if playerDeaths &gt; 0 then
                notifyTaken = true
            end
            if expGained ~= 0 then
                timeCurrent = os.time()
                timeFinish = os.difftime(timeCurrent, timeStart)
                if timeFinish &lt; 60 then
                    print("")
                    if notifySpent == true and notifyTaken == true then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..timeFinish.." seconds and gained "..expGained.." experience. You have spent and/or lost "..expTaken.." experience during this time.")
                    elseif notifySpent == true and notifyTaken == false then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..timeFinish.." seconds and gained "..expGained.." experience. You have spent "..expTaken.." experience during this time.")
                    elseif notifySpent == false and notifyTaken == true then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..timeFinish.." seconds and gained "..expGained.." experience. You have lost "..expTaken.." experience during this time.")
                    else
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..timeFinish.." seconds and gained a total of "..expGained.." experience.")
                    end
                elseif timeFinish &lt; 3600 then
                    totalMins = math.floor(timeFinish/60)
                    totalSecs = math.fmod(timeFinish, 60)
                    print("")
                    if notifySpent == true and notifyTaken == true then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalMins.." minutes, "..totalSecs.." second and gained "..expGained.." experience. You have spent and/or lost "..expTaken.." experience during this time.")
                    elseif notifySpent == true and notifyTaken == false then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained "..expGained.." experience. You have spent "..expTaken.." experience during this time.")
                    elseif notifySpent == false and notifyTaken == true then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained "..expGained.." experience. You have lost "..expTaken.." experience during this time.")
                    else
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalMins.." minutes, "..totalSecs.." seconds and gained a total of "..expGained.." experience.")
                    end
                elseif timeFinish &gt; 3599 then
                    totalSecs = math.fmod(timeFinish, 3600)
                    totalMins = math.floor(totalSecs/60)
                    totalHrs = math.floor(timeFinish/3600)
                    print("")
                    if notifySpent == true and notifyTaken == true then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalHrs.." hours, "..totalMins.." minutes and gained "..expGained.." experience. You have spent and/or lost "..expTaken.." experience during this time.")
                    elseif notifySpent == true and notifyTaken == false then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalHrs.." hours, "..totalMins.." minutes and gained "..expGained.." experience. You have spent "..expTaken.." experience during this time.")
                    elseif notifySpent == false and notifyTaken == true then
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalHrs.." hours,  "..totalMins.." minutes and gained "..expGained.." experience. You have lost "..expTaken.." experience during this time.")
                    else
                        ColourNote ("darkviolet", "black", "You have been tracking exp for "..totalHrs.." hours and "..totalMins.." minutes and gained a total of "..expGained.." experience.")
                    end
                end
            else
                print("")
                if expTracker == false then
                    ColourNote ("darkviolet", "black", "You are not currently tracking exp.")
                else
                    ColourNote ("darkviolet", "black", "You have not gained any experience since you began tracking.")
                end
            end
		else
			Send("%1 %2 dxp")
        end</send></alias>
  <alias
   match="dxp help"
   enabled="y"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>ColourNote ("ghostwhite", "indigo", "Demon Exp Tracker Manual")
		print("")
		ColourNote ("ghostwhite", "indigo", "Main commands")
		ColourNote ("darkviolet", "black", " 'dxp help'- Shows this help file.")
		ColourNote ("darkviolet", "black", " 'dxp' - Toggles exp tracking on/off.")
		ColourNote ("darkviolet", "black", " 'brag dxp' - Brags exp mark to room.")
		ColourNote ("darkviolet", "black", " 'brag channel dxp' - Brags exp mark to desired channel.")
		ColourNote ("darkviolet", "black", " 'show dxp' - Shows tracking time and exp total to player.")</send></alias>
 <alias
   match="cv dxp"
   enabled="y"
   group="champagneFarmer"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  <send>
	ColourNote ("darkviolet", "black", "***^._.^*** | DXP ANALYSIS: ----------------------------- | ***^._.^***")
	print("            | running        :          ",expTracker)
	print("            | timeStart      :          ",timeStart)
	print("            | timeCurrent    :          ",timeCurrent)
	print("            | timeFinish     :          ",timeFinish)
	print("            | totalSecs      :          ",totalSecs)
	print("            | totalMins      :          ",totalMins)
	print("            | totalHrs       :          ",totalHrs)
	print("            | expTableLength :          ",expTableLength)
	print("            | expGained      :          ",expGained)
	print("            | expTaken       :          ",expTaken)
	print("            | expLastKnown   :          ",expLastKnown)
	print("            | notifySpent    :          ",notifySpent)
	print("            | notifyTaken    :          ",notifyTaken)
	print("            | playerMicroGain:          ",playerMicroGain)
	print("            | playerLvlGain  :          ",playerLvlGain)
	print("            | playerPracGain :          ",playerPracGain)
	print("            | playerDeaths   :          ",playerDeaths)
	ColourNote ("darkviolet", "black", "***^._.^*** | --------------------------------------------- | ***^._.^***")</send></alias>	
  </aliases>
  
<!--  Script  -->
<script>
<![CDATA[
----------------------------------------------------------------------------------------
-- Functions
----------------------------------------------------------------------------------------
	function OnPluginInstall()
		ColourNote ("white", "indigo", "DemonMUSH_ExpTracker has been installed. Type 'dxp help' to learn more.")
	end
	
	-- The following is a modified version of Nick Gammons tprint.lua (replaced Notes with CoulourNotes).
	function tprint (t, indent, done)
		-- in case we run it standalone
		local Note = Note or print
		local Tell = Tell or io.write

		-- show strings differently to distinguish them from numbers
		local function show (val)
			if type (val) == "string" then
				return '"' .. val .. '"'
			else
				return tostring (val)
			end -- if
		end -- show
		-- entry point here
		done = done or {}
		indent = indent or 0
		for key, value in pairs (t) do
			Tell (string.rep (" ", indent)) -- indent it
			if type (value) == "table" and not done [value] then
				done [value] = true
				showKey = (show (key))
				print("")
				ColourNote("ghostwhite","indigo",showKey..":");
				tprint (value, indent + 2, done)
			else
				showKey = (show (key))
				showValue = (show (value))
				ColourNote( "darkviolet","black",showKey.." : "..showValue)
			end
		end
	end	
	
----------------------------------------------------------------------------------------
-- Global Variables
----------------------------------------------------------------------------------------
	expTracker = false
	timeStart = 0
	timeCurrent = 0
	timeFinish = 0
	expTableLength = 0
	expGained = 0
	expTaken = 0
	expLastKnown = 0
	playerMicroGain = 0
	playerLvlGain = 0
	playerPracGain = 0
	playerDeaths = 0
	totalSecs = 0
	totalMins = 0
	totalHrs = 0
	
	notifySpent = false
	notifyTaken = false

----------------------------------------------------------------------------------------
-- Tables
----------------------------------------------------------------------------------------
	expTable = {}
]]>
</script>
</muclient>
