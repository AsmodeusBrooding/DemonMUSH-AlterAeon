<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Monday, February 04, 2019, 10:37 PM -->
<!-- MuClient version 5.06-pre -->

<!-- Plugin "Alter_Aeon_Instance" generated by Plugin Wizard -->

<muclient>
<plugin
   name="DemonMUSH_Instances"
   author="Alas"
   id="0b9a137309320e41107e6b62"
   language="Lua"
   purpose="Remove instanced areas from mapper."
   date_written="2019-02-04 22:36:58"
   requires="5.00"
   version="1.0"
   >
<description trim="y">
<![CDATA[
descripz
]]>
</description>

</plugin>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="n"
   regexp="y"
   match="^kxwt_idle$"
   script="show_idle"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^kxwt_area (?<num>\d+) (?<area>.+)$"
   script="set_area"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   enabled="y"
   regexp="y"
   match="^{area_(?<area>.+)}You are in (?<instance>.+)\.$"
   script="area_instance"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  <trigger
   name="gag_all_area"
   enabled="y"
   regexp="y"
   match="^{area_(?<area>.+)}.*$"
   script=""
   omit_from_output="y"
   sequence="101"
  >
  </trigger>
  <trigger
   name="gag_all_instances"
   enabled="y"
   regexp="y"
   match="^{instances}.*$"
   script=""
   omit_from_output="y"
   sequence="101"
  >
  </trigger>
  <trigger
   enabled="y"
   regexp="y"
   match="^{instances}(?<zone>\[\d+\])\s+(?<ticks>[^\s]+)\s+(?<level>[^\s]+)\s+(?<group>[^\s]+)\s+(?<short>[\s\S]{0,43})(?<owners>.+)$"
   script="area_instance_details"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
  
  <trigger
   name="tick"
   enabled="y"
   regexp="y"
   match="^kxwt_audio misc/tick$"
   script="tick"
   omit_from_output="y"
   sequence="100"
  >
  </trigger>
</triggers>

-- You are not currently the owner of any instances.
-- where
-- Realm - The Island of Archais
-- -----------------------------------------------------------------
-- Loric Memorial Hospital (instance)
-- This is a level 27 area.
-- The minimum recommended level for this area is 25.
-- You have acquired none of the fame in this area.

-- Players that are nearby
-- -----------------------------------------------------------------
          -- Mammon        -> The trail comes to an end
		  
<!--  Aliases  -->

<aliases>
  <alias
   match="^instance debug$"
   enabled="y"
   regexp="y"
   script="debug"
   sequence="100"
  >
  </alias>
  <alias
   match="^instance clear$"
   enabled="y"
   regexp="y"
   script="clear"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->

<script>
<![CDATA[
require "tprint"
require "serialize"

local here = "" -- current area
local idle = false

local instance_lookup = {} -- short = long
local pvar = GetVariable("instance_lookup") or ""
if pvar ~= "" then
	instance_lookup = loadstring("return "..pvar)()
end
local instance_ticks = {} -- short = #

function trim(str)
	if str then
		return (str:gsub("^%s*(.-)%s*$", "%1"))
	else
		return ""
	end
end

function show_idle()
	idle = true
	DoAfterSpecial(33, "still_idle()", 12)
end

function still_idle()
	if idle then -- still idle, so alert
		ColourNote("darkmagenta", "whitesmoke", " You are IDLE. Instances cannot count down while idle. ")
		ColourNote("darkmagenta", "whitesmoke", " Please make a trigger to prevent being IDLE. ")
		DoAfterSpecial(60, "still_idle()", 12) -- 1 minute timer to announce idle. is user returns then tick will un-idle
	end
end

function tick()
	idle = false -- not idle
	if here == "" then -- no current area recorded, so look to get it
		Send("look")
		return
	end
	for short, long in pairs(instance_lookup) do
		if instance_ticks[short] then -- instance has been started and is waiting to count down
			if long ~= here then -- not in that instance area so count down
				instance_ticks[short] = instance_ticks[short] - 1
				if instance_ticks[short] == -1 then
					--Note("removing instance for ", short, " 2")
					instance_ticks[short] = nil
					CallPlugin("dd07d6dbe73fe0bd02ddb63d", "delete_area", long)
				end
			else
				--Note("In area so not counting down ticks: ", short)
			end
		end
	end
	BroadcastPlugin(1, "ticks updated")
end

function set_area(name, line, args)
	--Note("area = ", args.area)
	if here ~= args.area then
		--Note("new area. checking.")
		here = args.area
		check_area(here)
	end
end

function check_area(area)
	SendNoEcho("show area | prefix {area_"..area.."}")
	check_instances()
end

function area_instance(name, line, args)
	--Note("instance found")
	if not args.area == here then -- command crossed area boundary and info is invalid.
		--Note("not here")
		return
	end
	check_instance_lookup(args.area, args.instance)
end

function check_instances()
	SendNoEcho("instances | prefix {instances}")
end

function area_instance_details(name, line, args)
	--Note("set ticks if instance")
	args.short = trim(args.short)
	if instance_lookup[args.short] then 
		set_instance_ticks(args.short, tonumber(args.ticks))
		AddTimer("ticks_updated", 0, 0, .3, "", 1029, "ticks_updated") -- one shot timer to broadcast, will fire after last instance line recorded
	end
end

function ticks_updated()
	--Note("broadcasting")
	BroadcastPlugin(1, "ticks updated")
end

function set_instance_ticks(short, ticks)
	instance_ticks[short] = ticks
end

function check_instance_lookup(long, short)
	--Note("create instance lookup")
	instance_lookup[short] = long
	SaveState()
end

function debug()
	Note()
	Note("instance lookup:")
	tprint(instance_lookup)
	Note()
	Note("instance ticks:")
	tprint(instance_ticks)
	Note()
	local t = GetTriggerList()
	if t then
		for i, trig in ipairs(t) do
			Note(string.format("-%25s", trig), "     Enabled: ", string.format("%-5s", GetTriggerInfo(trig, 8)), "     Match: ", GetTriggerInfo(trig, 1))
			Note()
		end
	end
	Note()
end

function clear()
	instance_lookup = {}
	instance_ticks = {}
end

function sorted_instances()
	local tmp = {}
	for short, long in pairs(instance_lookup) do
		if instance_ticks[short] then
			table.insert(tmp, {area = short, instance = long, ticks = instance_ticks[short]})
		end
	end
	table.sort(tmp, by_area)
	local str = serialize.save_simple(tmp)
	return str
end

function by_area(a, b)
	return a.area < b.area
end

function OnPluginDisconnect()
	ColourNote("darkmagenta", "whitesmoke", " Clearing out instance ticks table. ")
	instance_ticks = {}
end

function OnPluginSaveState()
	SetVariable("instance_lookup", serialize.save_simple(instance_lookup))
end

]]>
</script>


</muclient>
